import { useState } from 'react'
import { 
  MobileLayout, 
  MobileHeader, 
  MobileContent,
  BottomNavigation 
} from '@/components/mobile'
import { LoadingSpinner } from '@/components/shared'
import { EmptyState } from '@/components/shared'
import { RefinanceVehicleCard } from './components/refinance-vehicle-card'
import { useRefinanceVehicles, useRefinanceCheck } from './hooks'
import { mockRefinanceVehicles } from './data/mock-data'
import { Search, Filter, RefreshCw } from 'lucide-react'

export function RefinanceCheckPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCondition, setSelectedCondition] = useState<string>('all')
  
  const { data: vehicles, isLoading, error, refetch } = useRefinanceVehicles()
  const refinanceCheckMutation = useRefinanceCheck()

  // Use mock data for now
  const displayVehicles = mockRefinanceVehicles.filter(vehicle => {
    const matchesSearch = vehicle.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vehicle.model.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vehicle.plateNumber.toLowerCase().includes(searchTerm.toLowerCase())
    
    const matchesCondition = selectedCondition === 'all' || vehicle.condition === selectedCondition
    
    return matchesSearch && matchesCondition
  })

  const handleCheckEligibility = (vehicleId: string) => {
    refinanceCheckMutation.mutate({
      vehicleId,
      customerInfo: {
        name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        phone: '081-234-5678',
        email: 'test@example.com'
      }
    })
  }

  const handleRefresh = () => {
    refetch()
  }

  if (isLoading) {
    return (
      <MobileLayout>
        <MobileHeader title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô" />
        <MobileContent className="flex items-center justify-center">
          <LoadingSpinner />
        </MobileContent>
      </MobileLayout>
    )
  }

  if (error) {
    return (
      <MobileLayout>
        <MobileHeader title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô" />
        <MobileContent className="flex items-center justify-center">
          <EmptyState
            icon="‚ö†Ô∏è"
            title="‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"
            description="‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
            actionLabel="‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà"
            onAction={handleRefresh}
          />
        </MobileContent>
      </MobileLayout>
    )
  }

  return (
    <MobileLayout>
      <MobileHeader title="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô" />
      
      <MobileContent className="pb-20">
        <div className="space-y-4">
          {/* Header Info */}
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-2xl p-4 text-white">
            <h2 className="text-lg font-bold mb-2">‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô‡∏£‡∏ñ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏ã‡∏Ñ‡πå</h2>
            <p className="text-blue-100 text-sm">
              ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            </p>
          </div>

          {/* Search and Filter */}
          <div className="space-y-3">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏ï‡∏≤‡∏°‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‡∏£‡∏∏‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div className="flex gap-2 overflow-x-auto pb-2">
              <button
                onClick={() => setSelectedCondition('all')}
                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                  selectedCondition === 'all'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
              <button
                onClick={() => setSelectedCondition('excellent')}
                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                  selectedCondition === 'excellent'
                    ? 'bg-green-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°
              </button>
              <button
                onClick={() => setSelectedCondition('good')}
                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                  selectedCondition === 'good'
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                ‡∏î‡∏µ
              </button>
              <button
                onClick={() => setSelectedCondition('fair')}
                className={`px-4 py-2 rounded-full text-sm font-medium whitespace-nowrap ${
                  selectedCondition === 'fair'
                    ? 'bg-yellow-500 text-white'
                    : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                ‡∏û‡∏≠‡πÉ‡∏ä‡πâ
              </button>
            </div>
          </div>

          {/* Results Count */}
          <div className="flex justify-between items-center">
            <p className="text-sm text-gray-600 dark:text-gray-400">
              ‡∏û‡∏ö‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ {displayVehicles.length} ‡∏Ñ‡∏±‡∏ô
            </p>
            <button
              onClick={handleRefresh}
              className="flex items-center gap-1 text-sm text-blue-600 hover:text-blue-700"
            >
              <RefreshCw className="w-4 h-4" />
              ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
            </button>
          </div>

          {/* Vehicle List */}
          {displayVehicles.length === 0 ? (
            <EmptyState
              icon="üîç"
              title="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç"
              description="‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏î‡∏π"
              actionLabel="‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
              onAction={() => {
                setSearchTerm('')
                setSelectedCondition('all')
              }}
            />
          ) : (
            <div className="space-y-4">
              {displayVehicles.map((vehicle) => (
                <RefinanceVehicleCard
                  key={vehicle.id}
                  vehicle={vehicle}
                  onCheckEligibility={handleCheckEligibility}
                />
              ))}
            </div>
          )}

          {/* Benefits Section */}
          <div className="bg-gray-50 dark:bg-gray-800 rounded-2xl p-4 mt-6">
            <h3 className="font-semibold text-gray-900 dark:text-gray-100 mb-3">
              ‡∏Ç‡πâ‡∏≠‡∏î‡∏µ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô
            </h3>
            <div className="space-y-2">
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 text-sm">‚úì</span>
                </div>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  ‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠
                </span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 text-sm">‚úì</span>
                </div>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                </span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 text-sm">‚úì</span>
                </div>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢ ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
                </span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-green-600 text-sm">‚úì</span>
                </div>
                <span className="text-sm text-gray-700 dark:text-gray-300">
                  ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≤‡∏¢‡∏£‡∏ñ ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ï‡πà‡∏≠
                </span>
              </div>
            </div>
          </div>
        </div>
      </MobileContent>

      <BottomNavigation currentPath="/refinance-check" />
    </MobileLayout>
  )
}
